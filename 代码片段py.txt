{
	// Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"ros2创建节点cpp文件": {
		"prefix": "ros2_node_py",
		"body": [
				"# 1.导包；",
				"import rclpy",
				"from rclpy.node import Node",
"",

				"# 3.定义节点类；",
				"class MyNode(Node):",
"",
				"    def __init__(self):",
				"        super().__init__('node name')",
				"        self.get_logger().info(\"节点创建了！\")",
"",
				"        # 3-2.创建定时器；",
				"        timer_period = 0.5 ",
				"        self.timer = self.create_timer(timer_period, self.timer_callback)",
"",
				"    # 3-3.组织消息并发布。",
				"    def timer_callback(self):",
				"        self.get_logger().info('回调处理的消息: \"%s\"' % \"msg data\")",

"",
"",
				"def main(args=None):",
				"    # 2.初始化 ROS2 客户端；",
				"    rclpy.init(args=args)",
				"    # 4.调用spin函数,并传入节点对象;",
				"    my_node = MyNode()",
				"    rclpy.spin(my_node)",
				"    # 5.释放资源。",
				"    rclpy.shutdown()",
"",
"",
				"if __name__ == '__main__':",
				"    main()"
		],
		"description": "ros2 node func"
	},

	"ros2创建客户端py": {
		"prefix": "ros2_client_py",
		"body": [
				"\"\"\"",
				"    需求：编写客户端，发送两个整型变量作为请求数据，并处理响应结果。",
				"    步骤：",
				"        1.导包；",
				"        2.初始化 ROS2 客户端；",
				"        3.定义节点类；",
				"            3-1.创建客户端；",
				"            3-2.等待服务连接；",
				"            3-3.组织请求数据并发送；",
				"        4.创建对象调用其功能，处理响应结果；",
				"        5.释放资源。",
"",
				"需要修改的变量名：",
				"    MyInterfacePkg      自定义的接口包名称",
				"    MySrvType           .srv的名称",
				"    Mynode              节点名称",
				"    globle_log_py     全局日志名",
"",
				"需要自定义的地方：",
				"    def send_request(self):          请求输入需要自定义",
				"",
				"\"\"\"",
"",
"",
				"# 1.导包；",
				"import rclpy",
				"from rclpy.node import Node",
				"from rclpy.logging import get_logger",
				"import sys",
"",
				"from MyInterfacePkg.srv import MySrvType",
"",
				"# 3.定义节点类；",
				"class MyNode(Node):",
"",
				"    def __init__(self):",
				"        super().__init__('Client_py')",
				"        #创建客户端",
				"        self.client=self.create_client(MySrvType,\"MySrvType\")",
				"        self.get_logger().info(\"客户端启动！\")",
				"        #等待服务连接",
				"        while not self.client.wait_for_service(1.0):",
				"            self.get_logger().info(\"服务连接中.....\")",
				"        #请求数据初始化",
				"        self.request=MySrvType.Request()",
"",
"",
				"    # 3-3.组织消息并发布。",
				"    def send_request(self):",
				"        self.request.num1=int(sys.argv[1])",
				"        self.future=self.client.call_async(self.request)",
"",
"",
				"def main(args=None):",
				"    #校验输入",
				"    if len(sys.argv)!=4:",
				"        get_logger(\"globle_log_py\").info(\"请提交正确数量的输入！\")",
				"        return",
				"    ",
				"    # 2.初始化 ROS2 客户端；",
				"    rclpy.init(args=args)",
"",
"",
				"    # 4.调用对象，发送请求;",
				"    my_node = MyNode()",
				"    my_node.send_request()",
"",
"",
				"    #处理响应",
				"    rclpy.spin_until_future_complete(my_node,my_node.future)",
"",
				"    #通过异常捕获确定是否返回处理结果",
				"    try:",
				"        response=my_node.future.result()",
				"    except Exception as e:",
				"        my_node.get_logger().error(\"服务请求失败！%r\"%(e,))",
				"    else:",
				"        my_node.get_logger().info('响应结果：')",
				"    ",
				"    # 5.释放资源。",
				"    rclpy.shutdown()",
"",
"",
				"if __name__ == '__main__':",
				"    main()",
		],
		"description": "创建一份client的py文件"
	},

	"ros2动作通讯服务端cpp": {
		"prefix": "ros2_action_service_cpp",
		"body": [
				"\"\"\"  ",
				"    需求：编写动作服务端实现，可以提取客户端请求提交的数据，并且处理数据，",
				"        每进行一步都计算当前运算进度并连续反馈回客户端，最后，在将最终结果返回给客户端。",
				"    步骤：",
				"        1.导包；",
				"        2.初始化 ROS2 客户端；",
				"        3.定义节点类；",
				"            3-1.创建动作服务端；",
				"            3-2.生成连续反馈；",
				"            3-3.生成最终响应。",
				"        4.调用spin函数，并传入节点对象；",
				"        5.释放资源。",
"",
				"    需要修改的变量名：    ",
				"        MyInterfacePkg      自定义的接口包名称",
				"        MyActionType        .action的名称",
				"        Mynode              自定义节点名称",
"",
				"\"\"\"",
"",
				"# 1.导包；",
				"import time",
				"import rclpy",
				"from rclpy.action import ActionServer",
				"from rclpy.action import GoalResponse",
				"from rclpy.action import CancelResponse",
				"from rclpy.node import Node",
"",
				"from MyInterfacePkg.action import MyActionType",
"",
				"# 3.定义节点类；",
				"class Mynode(Node):",
"",
				"    def __init__(self):",
				"        super().__init__('Mynode')",
				"        # 3-1.创建动作服务端；",
				"        \"\"\"  self,node,action_type,action_name,execute_callback\"\"\"",
				"        self._action_server = ActionServer(",
				"            self,",
				"            MyActionType,",
				"            'MyActionType',",
				"            execute_callback=self.execute_callback,",
				"            handle_accepted_callback=self.accepted_callback",
				"        )",
				"        self._action_server.register_goal_callback(self.goal_callback)",
				"        self._action_server.register_cancel_callback(self.cancel_callback)",
				"        self.get_logger().info('动作服务已经启动！')",
"",
"",
				"    def execute_callback(self, goal_handle):",
				"        self.get_logger().info('开始执行任务....')",
"",
				"        # 3-2.生成连续反馈；",
				"        feedback_msg = MyActionType.Feedback()",
"",
				"        sum = 0",
				"        for i in range(1, goal_handle.request.num + 1):",
				"            # 检查取消请求",
				"            if goal_handle.is_cancel_requested:",
				"                goal_handle.canceled()",
				"                self.get_logger().info('任务已取消')",
				"                return MyActionType.Result(sum)  # 返回取消结果",
				"            ",
				"            sum += i",
				"            feedback_msg.MyActionType = i / goal_handle.request.num",
				"            self.get_logger().info('连续反馈: %.2f' % feedback_msg.MyActionType)",
				"            goal_handle.publish_feedback(feedback_msg)",
				"            time.sleep(0.5)",
"",
				"        # 3-3.生成最终响应。",
				"        goal_handle.succeed()",
				"        result = MyActionType.Result()",
				"        result.sum = sum",
				"        self.get_logger().info('任务完成！')",
"",
				"        return result",
				"    ",
				"    #接受请求的接受逻辑",
				"    def goal_callback(self,goal_request):",
				"        #编写请求回应逻辑",
				"        if(goal_request.num<1):",
				"            self.get_logger().info('请输入正确的输入数据！')",
				"            return GoalResponse.REJECT",
				"        else:",
				"            self.get_logger().info('已收到请求！')",
				"            return GoalResponse.ACCEPT",
				"        ",
				"    #连续反馈逻辑",
				"    def accepted_callback(self,goal_handle):",
				"        self.get_logger().info('调用accepted_callback')",
				"        goal_handle.execute()#会去调用self.execute_callback",
"",
				"    #编写任务取消反馈,未成功,未知原因",
				"    def cancel_callback(self,cancel_request):",
				"        self.get_logger().info(cancel_request.__str__())",
				"        self.get_logger().info('任务取消！')",
				"        return CancelResponse.ACCEPT",
"",
				"def main(args=None):",
"",
				"    # 2.初始化 ROS2 客户端；",
				"    rclpy.init(args=args)",
"",
				"    # 4.调用spin函数，并传入节点对象；",
				"    action_server = Mynode()",
				"    rclpy.spin(action_server)",
"",
				"    # 5.释放资源。",
				"    rclpy.shutdown()",
"",
				"if __name__ == '__main__':",
				"    main()",
		],
		"description": "创建动作通讯服务端cpp模板"
	},

	"ros2动作通讯客户端cpp": {
		"prefix": "ros2_action_service_cpp",
		"body": [
					"\"\"\"  ",
					"需求：编写动作客户端实现，可以提交一个整型数据到服务端，并处理服务端的连续反馈以及最终返回结果。",
					"步骤：",
					"    1.导包；",
					"    2.初始化 ROS2 客户端；",
					"    3.定义节点类；",
					"        3-1.创建动作客户端；",
					"        3-2.发送请求；",
					"        3-3.处理目标发送后的反馈；",
					"        3-4.处理连续反馈；",
					"        3-5.处理最终响应。",
					"    4.调用spin函数，并传入节点对象；",
					"    5.释放资源。 ",
"",
				"    需要修改的变量名：    ",
				"        MyInterfacePkg      自定义的接口包名称",
				"        MyActionType        .action的名称",
				"        Mynode              自定义节点名称",
"",
					"\"\"\"",
					"# 1.导包；",
					"import sys",
					"import rclpy",
					"from rclpy.action import ActionClient",
					"from rclpy.node import Node",
					"from rclpy.logging import get_logger",
					"from MyInterfacePkg.action import MyActionType",
"",
					"# 3.定义节点类；",
					"class Mynode(Node):",
"",
					"    def __init__(self):",
					"        super().__init__('Mynode')",
					"        # 3-1.创建动作客户端；",
					"        \"\"\"node,action_type,action_name\"\"\"",
					"        self._action_client = ActionClient(self, MyActionType, 'MyActionType')",
"",
					"    def send_goal(self, num):",
					"        # 3-2.发送请求；",
					"        goal_msg = MyActionType.Goal()",
					"        goal_msg.num = num",
					"        self._action_client.wait_for_server()",
					"        \"\"\" self, goal, feedback_callback \"\"\"",
					"        self._send_goal_future = self._action_client.send_goal_async(goal_msg, feedback_callback=self.feedback_callback)",
					"        self._send_goal_future.add_done_callback(self.goal_response_callback)",
					"    ",
					"    # 3-4.处理连续反馈；",
					"    def feedback_callback(self, feedback_msg):",
					"        feedback = (int)(feedback_msg.feedback.MyActionType * 100)",
					"        self.get_logger().info('当前进度: %d%%' % feedback)",
"",
					"    # 3-3.处理目标发送后的反馈；",
					"    def goal_response_callback(self, future):",
					"        goal_handle = future.result()",
					"        if not goal_handle.accepted:",
					"            self.get_logger().info('请求被拒绝')",
					"            return",
"",
					"        self.get_logger().info('请求被接收，开始执行任务！')",
"",
					"        self._get_result_future = goal_handle.get_result_async()",
					"        self._get_result_future.add_done_callback(self.get_result_callback)",
"",
					"    # 3-5.处理最终响应。",
					"    def get_result_callback(self, future):",
					"        result = future.result().result",
					"        self.get_logger().info('最终计算结果：sum = %d' % result.sum)",
					"        # 5.释放资源。",
					"        rclpy.shutdown()",
"",
"",
					"def main(args=None):",
"",
					"    if len(sys.argv)!=2:",
					"        get_logger('globle_log_name').error('请输入正确的命令行参数！')",
					"        return",
					"    ",
					"    # 2.初始化 ROS2 客户端；",
					"    rclpy.init(args=args)",
					"    # 4.调用spin函数，并传入节点对象；",
"",
					"    action_client = Mynode()",
					"    action_client.send_goal(int(sys.argv[1]))",
					"    rclpy.spin(action_client)",
					"    ",
					"    rclpy.shutdown()",
"",
					"if __name__ == '__main__':",
					"    main()",
		],
		"description": "创建动作通讯客户端cpp模板"
	}
}
{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }


	"ROS2节点创建常规流程": {
		"prefix": "ros2_node_cpp",
		"body": [
				"// 1.包含头文件；",
				"#include \"rclcpp/rclcpp.hpp\"",
				"",
				"using std::placeholders::_1;",
				"using namespace std::chrono_literals;",
				"// 3.定义节点类；",
				"class Mynode : public rclcpp::Node",
				"{",
				"public:",
				"    Mynode()",
				"    : Node(\"Mynode\")",
				"    {",
				"    //3-1.输出日志；",
				"    RCLCPP_INFO(this->get_logger(),\"节点创建'%s'\",\"成功！\");",
				"    // 3-2.创建定时器；",
				"    timer_ = this->create_wall_timer(500ms, std::bind(&Mynode::timer_callback, this));",
				"    }",
				"",
				"private:",
				"    void timer_callback()",
				"    {",
				"    // 3-3.组织消息",
				"",
				"    }",
				"    rclcpp::TimerBase::SharedPtr timer_;",
				"};",
				"",
				"int main(int argc, char * argv[])",
				"{",
				"// 2.初始化 ROS2 客户端；",
				"rclcpp::init(argc, argv);",
				"// 4.调用spin函数,并传入节点对象指针。",
				"rclcpp::spin(std::make_shared<Mynode>());",
				"// 5.释放资源；",
				"rclcpp::shutdown();",
				"return 0;",
				"}"
		],
		"description": "ros2 node func"
	},



	
	"ROS2创建服务端": {
		"prefix": "ros2_service_func",
		"body": [
				"service_=this->create_service<your_srv_type>(\"your_srv_type\",std::bind(&Mynode::Add_callback,this,_1,_2));",
				"//输出日志；",
				"RCLCPP_INFO(this->get_logger(),\"服务端创建'%s'\",\"成功！\");",
				"",
				"",
				"void Add_callback(const your_srv_type::Request::SharedPtr rqs,const your_srv_type::Response::SharedPtr respon)",
				"{",
				"// 3-3.组织消息",
				"}",
				"rclcpp::Service<your_srv_type>::SharedPtr service_;",

		],
		"description": "create a service"
	},


		"ROS2创建客户端节点常规流程": {
		"prefix": "ros2_client_node_cpp",
		"body": [

				"/*  ",
				"需求：编写客户端，请求数据，并处理响应结果。",
				"步骤：",
				"    1.包含头文件；",
				"    2.初始化 ROS2 客户端；",
				"    3.定义节点类；",
				"    3-1.创建客户端；",
				"    3-2.等待服务连接；",
				"    3-3.组织请求数据并发送；",
				"    4.创建对象指针调用其功能,并处理响应；",
				"    5.释放资源。",
				"",
				"需要修改的变量名：",
				"    MyInterfacePkg      自定义的接口包名称",
				"    MySrvType           .srv的名称",
				"    Mynode              节点名称",
				"    globle_log_name     全局日志名",
"",
				"需要自定义的地方：",
				"    send_request(int32_t num1, int32_t num2){                               //请求输入需要自定义",
				"    auto response = myclient->send_request(atoi(argv[1]),atoi(argv[2]));    //请求的数据自定义",
				"*/",
				"// 1.包含头文件；",
				"#include \"rclcpp/rclcpp.hpp\"",
				"#include \"MyInterfacePkg/srv/MySrvType.hpp\"",
"",
				"using MyInterfacePkg::srv::MySrvType;",
				"using namespace std::chrono_literals;",
"",
				"// 3.定义节点类；",
				"class Mynode: public rclcpp::Node{",
				"public:",
				"    Mynode():Node(\"Mynode\"){",
				"    // 3-1.创建客户端；",
				"    client_ = this->create_client<MySrvType>(\"MySrvType\");",
				"    RCLCPP_INFO(this->get_logger(),\"客户端创建，等待连接服务端！\");",
				"    }",
				"    ",
				"",
				"    // 3-2.等待服务连接；",
				"    bool connect_server(){",
				"    while (!client_->wait_for_service(1s))",
				"    {",
				"        /* 捕捉crtl+c，避免bug */",
				"        if (!rclcpp::ok())",
				"        {",
				"        RCLCPP_INFO(rclcpp::get_logger(\"globle_log_name\"),\"强制退出！\");",
				"        return false;",
				"        }",
"",
				"        RCLCPP_INFO(this->get_logger(),\"服务连接中，请稍候...\");",
				"    }",
				"    return true;",
				"    }",
				"",
				"",
				"    // 3-3.组织请求数据并发送；",
				"    rclcpp::Client<MySrvType>::FutureAndRequestId ",
				"    send_request(int32_t num1, int32_t num2){//请求输入需要自定义",
				"    auto request = std::make_shared<MySrvType::Request>();",
				"",
				"    return client_->async_send_request(request);",
				"    }",
"",
"",
				"private:",
				"    rclcpp::Client<MySrvType>::SharedPtr client_;",
				"};",
"",
				"int main(int argc, char ** argv)",
				"{",
				"    int req_num=4;",
				"    if (argc != 3){",
				"        RCLCPP_INFO(rclcpp::get_logger(\"globle_log_name\"),\"请提交正确的请求数据数量！\");",
				"        return 1;",
				"    }",
"",
				"    // 2.初始化 ROS2 客户端；",
				"    rclcpp::init(argc,argv);",
"",
				"    // 4.创建对象指针并调用其功能；",
				"    auto myclient = std::make_shared<Mynode>();",
"",
				"    //判断是否连接上",
				"    bool flag = myclient->connect_server();",
				"    if (!flag)",
				"    {",
				"        RCLCPP_INFO(rclcpp::get_logger(\"globle_log_name\"),\"服务连接失败！\");",
				"        return 0;",
				"    }",
"",
				"    //发送请求",
				"    auto response = myclient->send_request(atoi(argv[1]),atoi(argv[2]));//请求的数据自定义",
"",
				"    // 处理响应",
				"    if (rclcpp::spin_until_future_complete(myclient,response) == rclcpp::FutureReturnCode::SUCCESS)",
				"    {",
				"        auto result = response.get(); // 保存结果到局部变量,response.get()调用一次就销毁",
				"        RCLCPP_INFO(myclient->get_logger(),\"请求正常处理\");",
				"        RCLCPP_INFO(myclient->get_logger(),\"响应结果:%d!\", result->res_type);//res_type为自己定义的srv的响应变量名,可以是多个变量名",
				"    } ",
				"    else {",
				"        RCLCPP_INFO(myclient->get_logger(),\"请求异常\");",
				"    }",
"",
				"    // 5.释放资源。",
				"    rclcpp::shutdown();",
				"    return 0;",
				"}",
"",

		],
		"description": "create a client node cpp"
	}
}
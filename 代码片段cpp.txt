{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }


	"ROS2节点创建常规流程": {
		"prefix": "ros2_node_cpp",
		"body": [
				"// 1.包含头文件；",
				"#include \"rclcpp/rclcpp.hpp\"",
				"",
				"using std::placeholders::_1;",
				"using namespace std::chrono_literals;",
				"// 3.定义节点类；",
				"class Mynode : public rclcpp::Node",
				"{",
				"public:",
				"    Mynode()",
				"    : Node(\"Mynode\")",
				"    {",
				"    //3-1.输出日志；",
				"    RCLCPP_INFO(this->get_logger(),\"节点创建'%s'\",\"成功！\");",
				"    // 3-2.创建定时器；",
				"    timer_ = this->create_wall_timer(500ms, std::bind(&Mynode::timer_callback, this));",
				"    }",
				"",
				"private:",
				"    void timer_callback()",
				"    {",
				"    // 3-3.组织消息",
				"",
				"    }",
				"    rclcpp::TimerBase::SharedPtr timer_;",
				"};",
				"",
				"int main(int argc, char * argv[])",
				"{",
				"// 2.初始化 ROS2 客户端；",
				"rclcpp::init(argc, argv);",
				"// 4.调用spin函数,并传入节点对象指针。",
				"rclcpp::spin(std::make_shared<Mynode>());",
				"// 5.释放资源；",
				"rclcpp::shutdown();",
				"return 0;",
				"}"
		],
		"description": "ros2 node func"
	}

	

}